<?xml version="1.0"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy"><title>import numpy as np</title><text xml:space="preserve"><note-content version="0.1" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size">import numpy as np
from tabulate import *

def ingresarRegistroEmpleado():
    checkCod = 0
    checkSalario = 0
    checkEdad = 0
    #global codigo

    cod = 0
    salario = 0.0
    edad = 19
    nombre = input(&quot;Ingrese el nombre: &quot;)
    while (checkCod == 0):
        try:
            cod = int(input(&quot;Ingrese el código: &quot;))
            if (type(cod) is int):# and cod not in codigo):
                checkCod = 1
        except:
            pass
    while (checkSalario == 0):
        try:
            salario = int(input(&quot;Ingrese el salario: &quot;))
            checkSalario = 1
        except:
            pass
    while (checkEdad == 0):
        try:
            edad = int(input(&quot;Ingrese la edad: &quot;))
            if(edad &gt;= 18 and edad &lt;= 40):
                checkEdad = 1
        except:
            pass
    return [nombre, cod, salario, edad]

#codigo edad salario sangre
  
def capturarDatos(nombre, codigo, salario, edad):
    code = &quot;1&quot;
    while (code != &quot;0&quot;):
        empleado = ingresarRegistroEmpleado()
        if (empleado[1] not in codigo):
            nombre.append(empleado[0])
            codigo.append(empleado[1])
            salario.append(empleado[2])
            edad.append(empleado[3])
        else:
            print(&quot;Ya se encuentra registrado un empleado con ese código.&quot;)
            print(&quot;Por lo tanto, los datos del nuevo empleado no serán guardados.&quot;)
        code = input(&quot;Si desea terminar oprima 0 &quot;)


def imprimirTabla(nombre, codigo, salario, edad, header):
    tabla = np.column_stack((nombre, codigo, salario, edad))
    print(tabulate(tabla, headers=header, tablefmt=&quot;grid&quot;))


# Función: Ordena los empleados de mayor a menor salario
# y muestra los nombres de los empleados que reciben el mayor salario
def ordenarEmpleadosConMayorSalario(nombre, codigo, salario, edad):
    ordenarDatos(nombre, codigo, salario, edad, salario)
    print(&quot;El mayor salario es: &quot;, salario[0])
    print(&quot;Los empleados que reciben este salario son:&quot;)
    for i in range(len(salario)):
        if(salario[i] == salario[0]):
            print(&quot;\t&quot;, nombre[i])

# Función: Ordena los datos de mayor a menor donde por parámtero
# ingresan el arreglo de nombre, codigo, salario, edad. El siguiente
# parámetro es el arreglo de referencia que se toma como patrón para ordenar
def ordenarDatos(nombre, codigo, salario, edad, busqueda):
    swapped = True
    while swapped:
        swapped = False
        for i in range(len(busqueda) - 1):
            if busqueda[i] &lt; busqueda[i + 1]:
                nombre[i], nombre[i + 1] = nombre[i + 1], nombre[i]
                codigo[i], codigo[i + 1] = codigo[i + 1], codigo[i]
                salario[i], salario[i + 1] = salario[i + 1], salario[i]
                edad[i], edad[i + 1] = edad[i + 1], edad[i]
                swapped = True

# Función: Busca y muestra la cantidad de empleados que hay de cada tipo de sangre
def buscarDatosEmpleado(nombre, codigo, salario, edad, header):
    code = &quot;1&quot;
    while (code != &quot;0&quot;):
        buscar = input(&quot;Ingresar el código del empleado a buscar: &quot;)
        for i in range(len(codigo)):
            if (codigo[i] == int(buscar)):
                imprimirTabla(nombre[i], codigo[i], salario[i], edad[i], header)
            elif (buscar == &quot;0&quot;):
                code = buscar

# Funcion: Calcula el valor correspondiente al pago de la nómina 
# (osea la suma de todos los salarios ) mensual y calcula el salario promedio
def calcularNomina(salario):
    nomina = 0.0
    salarioPromedio = 0.0
    for i in range(len(salario)):
        nomina += salario[i]
    print(&quot;El valor correspondiente al pago de todos los salarios mensuales es de: &quot;,nomina)
    print(&quot;El salario promedio es de: &quot;, nomina/len(salario))

    
# Funcion: Calcula la edad promedio de los empleados
def calcularPromedioEdadEmpleados(edadEmpleados):
  	promedioDeEdad = 0.0 # promedio de dedad decimanl
  	for i in range(len(edadEmpleados)):
      	promedioDeEdad += edadEmpleados[i]
    promedioDeEdad = promedioDeEdad/len(edadEmpelados)
    print(&quot;El promedio de edad de los empleados es&quot;, promedioDeEdad)
    

def main():
    header = [&quot;Nombre y apellido&quot;, &quot;Code&quot;, &quot;Salary&quot;, &quot;Age&quot;]
    nombre = []
    codigo = []
    salario = []
    edad = []

    # Capturar datos por teclado
    print(&quot;Para ingresar los datos de un empleado tenga en cuenta lo siguiente:&quot;)
    print(&quot;El código debe ser un valor entero&quot;)
    print(&quot;La edad permitida es entre 19 y 40 años\n&quot;)
    capturarDatos(nombre, codigo, salario, edad)
    imprimirTabla(nombre, codigo, salario, edad, header)

    # Mostrar empleados con mayor salario (de mayor a menor)
    print(&quot;\nMostrar empleados con mayor salario:&quot;)
    ordenarEmpleadosConMayorSalario(nombre, codigo, salario, edad)
    
    # Ordenar datos por código (de menor a mayor)
    print(&quot;\nOrdenar datos por código&quot;)
    ordenarDatos(nombre, codigo, salario, edad, codigo)
    imprimirTabla(nombre, codigo, salario, edad, header)

    # Buscar los datos de un empleado por el código
    print(&quot;\nBuscar los datos de un empleado por el código&quot;)
    buscarDatosEmpleado(nombre, codigo, salario, edad, header)
    imprimirTabla(nombre, codigo, salario, edad, header)

    # Calcular el valor correspondiente al pago de todos los salarios mensuales
    print(&quot;\nCalcular el valor de la nómina&quot;)
    calcularNomina(salario)
    
    # Calcular edad promedio de empleados
    print(&quot;\Calcular el promedio de edad de los empleados&quot;)
    calcularPromedioEdadEmpleados(edad)


if __name__ == &quot;__main__&quot;:
    main()
</note-content>
</text><last-change-date>2020-06-18T20:17:4.886314Z</last-change-date><last-metadata-change-date>2020-06-18T20:17:4.895813Z</last-metadata-change-date><create-date>2020-06-18T19:58:40.125269Z</create-date><cursor-position>328</cursor-position><selection-bound-position>-1</selection-bound-position><width>0</width><height>0</height></note>

