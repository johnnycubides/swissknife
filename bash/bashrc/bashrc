# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
   # DEBE SER REVISADO JOHNNY 
   source ~/.dircolors
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# PowerLine in BASH from vim
# powerline-daemon -q
# POWERLINE_BASH_CONTINUATION=1
# POWERLINE_BASH_SELECT=1
# . ~/gitPackages/powerline/powerline/bindings/bash/powerline.sh

# PowerLine-Shell
function _update_ps1() {
    PS1=$(powerline-shell $?)
}

if [[ $TERM != linux && ! $PROMPT_COMMAND =~ _update_ps1 ]]; then
    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
fi

# set vim as a text editor
export EDITOR=/usr/bin/vim
# NVM para nodejs NPM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

#Compiador esp32
#alias get_esp32='export PATH="$HOME/esp/xtensa-esp32-elf/bin:$PATH"'
export PATH="$HOME/gitPackages/esp/xtensa-esp32-elf/bin:$PATH"
export PATH=$PATH:$HOME/gitPackages/esp/crosstool-NG/builds/xtensa-esp32-elf/bin

#Compiador esp8266
# export PATH="$HOME/gitPackages/esp-toolchains/esp8266-linux-x86_64-2019120.0/bin:$PATH"
export PATH="$HOME/gitPackages/esp-open-sdk/xtensa-lx106-elf/bin:$PATH"

# rust
export PATH="$HOME/.cargo/bin:$PATH"

# mos "mongoose"
PATH="$PATH:/home/johnny/.mos/bin"
PATH="$PATH:/home/johnny/.mos/bin"
# export PATH=$PATH:/home/johnny/projects/droidstamp/dev/droidstamp/software/imx233/u-boot/ubootBuild/u-boot-test-2020/gcc-arm-none-eabi-4_7-2013q1/bin
export PATH=$PATH:/opt/gcc-arm-compile/gcc-arm-none-eabi-6-2017-q2-update/bin/
# éste compilador no se sabe si funciona correctamente
export PATH=$PATH:/home/johnny/projects/droidstamp/dev/droidstamp/software/imx233/compiler/gcc-linaro-4.9-2015.05-1-rc1-x86_64_arm-linux-gnueabi/bin/
# El de buildroot funciona ok pero es versión 8 :( algo superior) hay que hacer pruebas!
export PATH=$PATH:/home/johnny/projects/droidstamp/dev/droidstamp/software/imx233/fileSystem/buildroot/build/buildroot-2019.11.1/output/host/usr/bin/
# compiler of omega2+
export PATH=$PATH:/home/johnny/projects/omega-openwrt/staging_dir/toolchain-mipsel_24kc_gcc-7.3.0_musl/bin/
# Flutter PATH 
export PATH=$PATH:$HOME/gitPackages/flutter/bin

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/johnny/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/johnny/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/johnny/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/johnny/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
# conda activate fpga
